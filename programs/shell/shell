_G["graduation"].shell = {};
graduation.shell.version = "0.1.0";
graduation.shell.aliases = {};

graduation.console.write("Loading aliases... ", colors.lightGray);

if fs.exists(graduation.system.path .. "/programs/shell/aliases.shell") == false then
	local t = {
		ver = "/programs/version",
		version = "/programs/version",
		clear = "/programs/clear",
		cls = "/programs/clear",
		cs = "/programs/clear",
		cd = "/programs/cd",
		ls = "/programs/ls",
		dir = "/programs/ls",
		ld = "/programs/ls",
		ldir = "/programs/ls",
		whereami = "/programs/whereami",
		wai = "/programs/whereami",
		cat = "/programs/cat",
		type = "/programs/cat",
		lc = "/programs/cat",
		copy = "/programs/cp",
		xcopy = "/programs/cp",
		cp = "/programs/cp",
		cf = "/programs/cp",
		mv = "/programs/mv",
		move = "/programs/mv",
		mf = "/programs/mv",
		movefile = "/programs/mv",
		movef = "/programs/mv",
		rm = "/programs/del",
		del = "/programs/del",
		remove = "/programs/del",
		delete = "/programs/del",
	};
	
	local f = fs.open(graduation.system.path .. "/programs/shell/aliases.shell", "w");
	f.write(textutils.serialise(t));
	f.close();
end

local f = fs.open(graduation.system.path .. "/programs/shell/aliases.shell", "r");
graduation.shell.aliases = textutils.unserialise(f.readAll());
f.close();

graduation.console.print("done", colors.white);

-- Source: https://github.com/alekso56/ComputercraftLua/blob/master/rom/programs/shell
function graduation.shell.resolve(path)
	local schar = string.sub(path, 1, 1);
	
	if schar == "/" or schar == "\\" then
		return fs.combine("/", path);
	else
		return fs.combine(graduation.shell.path, path);
	end
end

function graduation.shell.parse(str)	
	local isp = string.sub(str, - string.len(" ")) == " ";
	
	if isp == false then
		wstr = str .. " ";
	else
		wstr = str;
	end
	
	characters = {};
	wstr:gsub(".", function(ch) table.insert(characters, ch); end);
	
	local recmode = false;
	local currentrec = "";
	
	local currentarg = "";
	local arguments = {};
	
	for index, character in ipairs(characters) do
		if recmode then
			if character == "\"" then
				table.insert(arguments, currentrec);
				currentrec = "";
				recmode = false;
			else
				currentrec = currentrec .. character;
			end
		else
			if character == "\"" then
				recmode = true;
				currentrec = "";
			elseif character == " " then
				table.insert(arguments, currentarg);
				currentarg = "";
			elseif index - 1 == #characters then
				table.insert(arguments, currentarg);
				currentarg = "";
			else
				currentarg = currentarg .. character;
			end
		end
	end
	
	return arguments;
end

graduation.console.write("\nGraduation Shell ", colors.lightGray);
graduation.console.write(graduation.shell.version, colors.white);
graduation.console.write("\n", colors.lightGray);

graduation.shell.running = true;
graduation.shell.path = graduation.system.path;

while (graduation.shell.running) do
	term.setTextColor(colors.lightGray);
	term.setBackgroundColor(colors.black);
	
	graduation.console.write(os.getComputerLabel(), colors.gray);
	graduation.console.write("@", colors.lightGray);
	graduation.console.write("/" .. graduation.shell.path, colors.white);
	graduation.console.write(" $ ", colors.lightGray);
	
	term.setTextColor(colors.white);
	local command = read();
	term.setTextColor(colors.lightGray);
	
	local line = graduation.shell.parse(command);
	
	local t = line;
		
	local nt = {};
		
	for index, item in ipairs(t) do
		if index > 1 then
			table.insert(nt, item);
		end
	end
	
	graduation.shell.arguments = nt;
	
	if graduation.string.empty(command) == false then
		if graduation.shell.aliases[line[1]] ~= nil then
			local path = graduation.system.path .. graduation.shell.aliases[line[1]];
			
			if fs.exists(path) and fs.isDir(path)== false then
				os.run({}, path, unpack(nt));
			else
				graduation.console.print("Bad command or filename.", colors.gray);
			end
		elseif fs.exists(line[1] .. graduation.shell.path) then
			os.run({}, line[1] .. graduation.shell.path, unpack(nt));
		else
			local path = "/" .. graduation.shell.path .. "/" .. line[1];
			
			if fs.exists(path) and fs.isDir(path) == false then
				os.run({}, graduation.shell.resolve("/" .. graduation.shell.path .. "/" .. line[1]), unpack(nt));
			else
				graduation.console.print("Bad command or filename.", colors.gray);
			end
		end
	end
end